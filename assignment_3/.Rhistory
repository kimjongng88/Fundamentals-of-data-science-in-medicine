print(count)
}
print(count)
x <- c(0.1)
for (val in x) {
test1 <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T, cost = 0.001)
test2 <- predict(test1, newdata = raw.test[,-1], decision.values = F, probability = T)
count < - append(count,auc(raw.test$cc, attr(test2, "probabilities")[,2]))
print(count)
}
print(count)
x <- c(0.1)
for (val in x) {
test1 <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T, cost = 0.1)
test2 <- predict(test1, newdata = raw.test[,-1], decision.values = F, probability = T)
count < - append(count,auc(raw.test$cc, attr(test2, "probabilities")[,2]))
print(count)
}
print(count)
lsvm.fit <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T,cost=0.1)
lsvm.pred <- predict(lsvm.fit, newdata = raw.test[,-1], decision.values = F, probability = T)
auc(raw.test$cc, attr(lsvm.pred, "probabilities")[,2])
x <- c(0.1)
for (val in x) {
test1 <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T, cost = 0.1)
test2 <- predict(test1, newdata = raw.test[,-1], decision.values = F, probability = T)
count < - append(count,auc(raw.test$cc, attr(test2, "probabilities")[,2]))
print(count)
}
print(count)
x <- c(0.1)
for (val in x) {
}
test1 <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T, cost = 0.1)
test2 <- predict(test1, newdata = raw.test[,-1], decision.values = F, probability = T)
count < - append(count,auc(raw.test$cc, attr(test2, "probabilities")[,2]))
print(count)
x <- c(0.1)
for (val in x) {
}
test1 <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T, cost = 0.1)
test2 <- predict(test1, newdata = raw.test[,-1], decision.values = F, probability = T)
count < - append(count,auc(raw.test$cc, attr(test2, "probabilities")[,2]))
print(count)
x <- c(0.1)
for (val in x) {
}
test1 <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T, cost = 0.1)
test2 <- predict(test1, newdata = raw.test[,-1], decision.values = F, probability = T)
count < - append(count,auc(raw.test$cc, attr(test2, "probabilities")[,2]))
print(count)
test1 <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T, cost = 0.1)
test2 <- predict(test1, newdata = raw.test[,-1], decision.values = F, probability = T)
count < - append(count,auc(raw.test$cc, attr(test2, "probabilities")[,2]))
print(count)
test1 <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T,cost=0.1)
test2 <- predict(test1, newdata = raw.test[,-1], decision.values = F, probability = T)
count < - append(count,auc(raw.test$cc, attr(test2, "probabilities")[,2]))
print(count)
test1 <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T,cost=0.1)
test2 <- predict(test1, newdata = raw.test[,-1], decision.values = F, probability = T)
auc(raw.test$cc, attr(test2, "probabilities")[,2])
test1 <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T,cost=0.1)
test2 <- predict(test1, newdata = raw.test[,-1], decision.values = F, probability = T)
auc(raw.test$cc, attr(test2, "probabilities")[,2])
x <- c(2,5,3,9,8,11,6)
count <- 0
for (val in x) {
if(val %% 2 == 0)  count = count+1
}
print(count)
test1 <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T,cost=0.1)
test2 <- predict(test1, newdata = raw.test[,-1], decision.values = F, probability = T)
auc(raw.test$cc, attr(test2, "probabilities")[,2])
x <- c(0.1)
count <- 0
for (val in x) {
testloop <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T,cost=val)
testloop2 <- predict(testloop, newdata = raw.test[,-1], decision.values = F, probability = T)
auc(raw.test$cc, attr(testloop2, "probabilities")[,2])
}
print(count)
test1 <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T,cost=0.1)
test2 <- predict(test1, newdata = raw.test[,-1], decision.values = F, probability = T)
auc(raw.test$cc, attr(test2, "probabilities")[,2])
x <- c(0.1)
count <- 0
for (val in x) {
testloop <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T,cost=val)
testloop2 <- predict(testloop, newdata = raw.test[,-1], decision.values = F, probability = T)
count<-auc(raw.test$cc, attr(testloop2, "probabilities")[,2])
}
print(count)
test1 <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T,cost=0.1)
test2 <- predict(test1, newdata = raw.test[,-1], decision.values = F, probability = T)
auc(raw.test$cc, attr(test2, "probabilities")[,2])
x <- c(0.1,10)
count <- 0
for (val in x) {
testloop <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T,cost=val)
testloop2 <- predict(testloop, newdata = raw.test[,-1], decision.values = F, probability = T)
count<-auc(raw.test$cc, attr(testloop2, "probabilities")[,2])
my_vec <- c(my_vec, count)
}
test1 <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T,cost=0.1)
test2 <- predict(test1, newdata = raw.test[,-1], decision.values = F, probability = T)
auc(raw.test$cc, attr(test2, "probabilities")[,2])
x <- c(0.1,10)
count <- 0
my_vec = c()
for (val in x) {
testloop <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T,cost=val)
testloop2 <- predict(testloop, newdata = raw.test[,-1], decision.values = F, probability = T)
count<-auc(raw.test$cc, attr(testloop2, "probabilities")[,2])
my_vec <- c(my_vec, count)
}
print(my_vec)
test1 <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T,cost=0.1)
test2 <- predict(test1, newdata = raw.test[,-1], decision.values = F, probability = T)
auc(raw.test$cc, attr(test2, "probabilities")[,2])
x <- c(seq(1, 10, 0.1))
count <- 0
my_vec = c()
for (val in x) {
testloop <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T,cost=val)
testloop2 <- predict(testloop, newdata = raw.test[,-1], decision.values = F, probability = T)
count<-auc(raw.test$cc, attr(testloop2, "probabilities")[,2])
my_vec <- c(my_vec, count)
}
print(my_vec)
x <- c(seq(1, 2, 0.1))
count <- 0
a_vec = c()
for (val in x) {
testloop <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T,cost=val)
testloop2 <- predict(testloop, newdata = raw.test[,-1], decision.values = F, probability = T)
count<-auc(raw.test$cc, attr(testloop2, "probabilities")[,2])
a_vec <- c(a_vec, count)
}
print(a_vec)
x <- c(seq(1, 2, 0.1))
print(x)
count <- 0
a_vec = c()
for (val in x) {
testloop <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T,cost=val)
testloop2 <- predict(testloop, newdata = raw.test[,-1], decision.values = F, probability = T)
count<-auc(raw.test$cc, attr(testloop2, "probabilities")[,2])
a_vec <- c(a_vec, count)
}
print(a_vec)
x <- c(seq(0.1, 2, 0.1))
print(x)
count <- 0
a_vec = c()
for (val in x) {
testloop <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T,cost=val)
testloop2 <- predict(testloop, newdata = raw.test[,-1], decision.values = F, probability = T)
count<-auc(raw.test$cc, attr(testloop2, "probabilities")[,2])
a_vec <- c(a_vec, count)
}
print(a_vec)
x <- c(seq(0.1, 1, 0.1))
print(x)
count <- 0
a_vec = c()
for (val in x) {
testloop <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T,cost=val)
testloop2 <- predict(testloop, newdata = raw.test[,-1], decision.values = F, probability = T)
count<-auc(raw.test$cc, attr(testloop2, "probabilities")[,2])
a_vec <- c(a_vec, count)
}
print(a_vec)
x <- c(seq(0.1, 1, 0.1))
print(x)
count <- 0
a_vec = c()
for (val in x) {
testloop <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T,cost=val)
testloop2 <- predict(testloop, newdata = raw.test[,-1], decision.values = F, probability = T)
count<-auc(raw.test$cc, attr(testloop2, "probabilities")[,2])
a_vec <- c(a_vec, count)
}
print(a_vec)
data.frame(as.table(setNames(x, a_vec)))
costs <- c(seq(0.1, 1, 0.1))
print(x)
count <- 0
a_vec = c()
for (val in x) {
testloop <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T,cost=costs)
testloop2 <- predict(testloop, newdata = raw.test[,-1], decision.values = F, probability = T)
count<-auc(raw.test$cc, attr(testloop2, "probabilities")[,2])
a_u_c <- c(a_u_c, count)
}
costs <- c(seq(0.1, 1, 0.1))
print(x)
count <- 0
a_u_c = c()
for (val in x) {
testloop <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T,cost=costs)
testloop2 <- predict(testloop, newdata = raw.test[,-1], decision.values = F, probability = T)
count<-auc(raw.test$cc, attr(testloop2, "probabilities")[,2])
a_u_c <- c(a_u_c, count)
}
print(a_vec)
data.frame(as.table(setNames(a_u_c,costs)))
costs <- c(seq(0.1, 1, 0.1))
print(x)
count <- 0
a_u_c = c()
for (val in x) {
testloop <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "linear", probability = T,cost=costs)
testloop2 <- predict(testloop, newdata = raw.test[,-1], decision.values = F, probability = T)
count<-auc(raw.test$cc, attr(testloop2, "probabilities")[,2])
a_u_c <- c(a_u_c, count)
}
print(a_u_c)
data.frame(as.table(setNames(a_u_c,costs)))
poly <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "polynomial", probability = T,cost=costs)
rb <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "radial basis", probability = T,cost=costs)
poly <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "polynomial", probability = T,cost=costs)
rb <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "radialbasis", probability = T,cost=costs)
poly <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "polynomial", probability = T,cost=costs)
rb <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "radial_basis", probability = T,cost=costs)
poly <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "polynomial", probability = T,cost=costs)
sig <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "sigmoid", probability = T,cost=costs)
rb <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "radial_basis", probability = T,cost=costs)
poly <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "polynomial", probability = T,cost=costs)
sig <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "sigmoid", probability = T,cost=costs)
rb <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "radial", probability = T,cost=costs)
poly <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "polynomial", probability = T,cost=costs)
poly.fit<- predict(poly, newdata = raw.test[,-1], decision.values = F, probability = T)
poly.score<-auc(raw.test$cc, attr(pol.fit, "probabilities")[,2])
poly <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "polynomial", probability = T,cost=costs)
poly.fit<- predict(poly, newdata = raw.test[,-1], decision.values = F, probability = T)
poly.score<-auc(raw.test$cc, attr(poly.fit, "probabilities")[,2])
sig <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "sigmoid", probability = T,cost=costs)
sig.fit<- predict(sig, newdata = raw.test[,-1], decision.values = F, probability = T)
sig.score<-auc(raw.test$cc, attr(sig.fit, "probabilities")[,2])
rb <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "radial", probability = T,cost=costs)
rb.fit<- predict(rb, newdata = raw.test[,-1], decision.values = F, probability = T)
rb.score<-auc(raw.test$cc, attr(rb.fit, "probabilities")[,2])
print(poly.score,sig.score,rb.score)
poly <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "polynomial", probability = T,cost=costs)
poly.fit<- predict(poly, newdata = raw.test[,-1], decision.values = F, probability = T)
poly.score<-auc(raw.test$cc, attr(poly.fit, "probabilities")[,2])
sig <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "sigmoid", probability = T,cost=costs)
sig.fit<- predict(sig, newdata = raw.test[,-1], decision.values = F, probability = T)
sig.score<-auc(raw.test$cc, attr(sig.fit, "probabilities")[,2])
rb <- svm(cc ~ ., data = raw.training, type = "C-classification", kernel = "radial", probability = T,cost=costs)
rb.fit<- predict(rb, newdata = raw.test[,-1], decision.values = F, probability = T)
rb.score<-auc(raw.test$cc, attr(rb.fit, "probabilities")[,2])
print(poly.score)
print(sig.score)
print(rb.score)
rf.fit <- randomForest(cc ~ ., data = raw.training, importance = T, type = "classification")
rf.fit
importance(rf.fit)
importance(rf.fit)
rf.fit
View(rf.fit)
View(raw.test)
View(raw.training)
View(raw.training)
y_pred = predict(rf.fit, newdata = raw.test)
y_pred = predict(rf.fit, newdata = raw.test)
y_pred
y_pred = predict(rf.fit, newdata = raw.test)
confusion_mtx = table(raw.test, y_pred)
y_pred = predict(rf.fit, newdata = raw.test[,-3])
y_pred = predict(rf.fit, newdata = raw.test[-3])
y_pred = predict(rf.fit, newdata = raw.test[-5])
immportance(rf.fit)
importance(rf.fit)
y_pred = predict(rf.fit, newdata = raw.test)
y_pred
y_pred
auc<- performance(y_pred,"auc")
y_pred
auc<- performance(y_pred,"tpr","fpr")
y_pred
auc<- performance(y_pred,measure="auc")
library("pROC")
library("e1071")
library("randomForest")
library(ROCR)
library("ROCR")
install.packages("ROCR")
library(RCOR)
library("RCOR")
y_pred
auc<- performance(y_pred,measure="auc")
library(ROCR)
auc<- performance(y_pred,measure="auc")
library(ROCR)
y_pred = prediction(rf.fit,raw.test)
library(ROCR)
y_pred = prediction(ROCR.rf.fit,ROCR.raw.test)
library(ROCR)
y_pred = prediction(y_pred)
library(ROCR)
y_pred = prediction(y_pred,raw.test$labels)
library(ROCR)
y_pred = predict(rf.fitF, newdata = raw.test)
library(ROCR)
y_pred = predict(rf.fit, newdata = raw.test)
auc<- performance(y_pred,measure="auc")
library(ROCR)
y_pred = predict(rf.fit, newdata = raw.test)
auc<- performance(y_pred,"tpr","fpr")
library(ROCR)
y_pred = predict(rf.fit, newdata = raw.test)
auc<- performance(y_pred, "prec", "rec")
library(ROCR)
y_pred = predict(rf.fit, newdata = raw.test)
auc<- performance(y_pred, "sens", "spec")
library(ROCR)
y_pred = predict(rf.fit, newdata = raw.test)
y_pred
library(ROCR)
y_pred = predict(rf.fit, newdata = raw.test)
auc(raw.test$cc, attr(y_pred, "probabilities")[,2])
library(ROCR)
y_pred = predict(rf.fit, newdata = raw.test)
d <- auc(raw.test$cc, attr(y_pred, "probabilities")[,2])
library(ROCR)
y_pred = predict(rf.fit, newdata = raw.test)
rb.fit
d <- auc(raw.test$cc, attr(y_pred, "probabilities")[,2])
library(ROCR)
y_pred = predict(rf.fit, newdata = raw.test[,-1], decision.values = F, probability = T)
rb.fit
d <- auc(raw.test$cc, attr(y_pred, "probabilities")[,2])
library(ROCR)
y_pred = predict(rf.fit, newdata = raw.test[,-1], decision.values = F, probability = T)
y_pred
d <- auc(raw.test$cc, attr(y_pred, "probabilities")[,2])
y_pred = predict(rf.fit, newdata = raw.test[,-1], decision.values = F, probability = T)
y_pred
d <- roc(raw.test$cc, attr(y_pred, "probabilities")[,2])
y_pred = predict(rf.fit, newdata = raw.test[,-1], decision.values = F, probability = T)
y_pred
d <- auc(raw.test$cc, attr(y_pred, "probabilities")[,2])
y_pred = predict(rf.fit, newdata = raw.test[,-1], decision.values = F, probability = T)
sig.fit
d <- auc(raw.test$cc, attr(y_pred, "probabilities")[,2])
y_pred = predict(rf.fit, newdata = raw.test[,-1], decision.values = F, probability = T)
polt(rf.fit)
y_pred = predict(rf.fit, newdata = raw.test[,-1], decision.values = F, probability = T)
plot(rf.fit)
y_pred = predict(rf.fit, newdata = raw.test[,-1], type="prob")
plot(rf.fit)
View(y_pred)
y_pred = predict(rf.fit, newdata = raw.test[,-1], type="prob")
plot(y_pred)
y_pred = predict(rf.fit, newdata = raw.test[,-1], type="prob")
plot(y_pred)
rf.roc<-roc(raw.test$cc, attr(y_pred, "probabilities")[,2])
y_pred = predict(rf.fit, newdata = raw.test[,-1], type="prob")
plot(y_pred)
rf.roc<-roc(raw.test$cc, attr(y_pred, "probabilities")[,2])
y_pred = predict(rf.fit, newdata = raw.test[,-1], type="prob")
plot(y_pred)
rf.roc<-roc(raw.test$cc, y_pred)
y_pred = predict(rf.fit, newdata = raw.test[,-1], type="prob")
plot(y_pred)
rf.roc<-roc(raw.test$cc, rf.fit$predicted)
View(y_pred)
y_pred = predict(rf.fit, newdata = raw.test[,-1])
plot(y_pred)
rf.roc<-roc(raw.test$cc, rf.fit$predicted)
y_pred = predict(rf.fit, newdata = raw.test[,-1])
rf.roc<-roc(raw.test$cc, y_pred)
y_pred = predict(rf.fit, newdata = raw.test[,-1])
rf.roc<-roc(raw.test$cc, attr(rb.fit, "probabilities")[,2])
y_pred = predict(rf.fit, newdata = raw.test[,-1])
rf.roc<-roc(raw.test$cc, attr(rb.fit, "probabilities")[,2])
rf.roc
y_pred = predict(rf.fit, newdata = raw.test[,-1])
rf.roc<-roc(raw.test$cc, attr(rb.fit, "probabilities")[,2])
plot(rf.roc)
y_pred = predict(rf.fit, newdata = raw.test[,-1])
rf.roc<-roc(raw.test$cc, attr(rb.fit, "probabilities")[,2])
plot(rf.roc)
rf.roc
y_pred = predict(rf.fit, newdata = raw.test[,-1])
rf.roc<-roc(raw.test$cc, attr(rf.fit, "probabilities")[,2])
y_pred = predict(rf.fit, newdata = raw.test[,-1])
rf.roc<-roc(raw.test$cc, attr(y_pred, "probabilities")[,2])
y_pred = predict(rf.fit, newdata = raw.test[,-1])
rb.fit
rf.roc<-roc(raw.test$cc, attr(y_pred, "probabilities")[,2])
y_pred = predict(rf.fit, newdata = raw.test[,-1], decision.values = F, probability = T)
rf.roc<-roc(raw.test$cc, attr(y_pred, "probabilities")[,2])
y_pred = predict(rf.fit, newdata = raw.test[,-1], decision.values = F, probability = T)
rf.roc<-roc(raw.test$cc, attr(rb.fit "probabilities")[,2])
y_pred = predict(rf.fit, newdata = raw.test[,-1], decision.values = F, probability = T)
rf.roc<-roc(raw.test$cc, attr(rb.fit, "probabilities")[,2])
plot(rf.roc)
rf.roc
y_pred = predict(rf.fit, newdata = raw.test[,-1], decision.values = F, probability = T)
class(rb.fit)
class(y_pred)
rf.roc<-roc(raw.test$cc, attr(rb.fit, "probabilities")[,2])
plot(rf.roc)
rf.roc
y_pred = predict(rf.fit, newdata = raw.test[,-1], decision.values = F, probability = T)
rb.fit
rf.roc<-roc(raw.test$cc, attr(rb.fit, "probabilities")[,2])
plot(rf.roc)
rf.roc
rf.fit <- randomForest(cc ~ ., data = raw.training, importance = T, type = "classification", probability = T)
y_pred = predict(rf.fit, newdata = raw.test[,-1], decision.values = F, probability = T)
rb.fit
rf.roc<-roc(raw.test$cc, attr(rb.fit, "probabilities")[,2])
plot(rf.roc)
rf.roc
y_pred = predict(rf.fit, newdata = raw.test[,-1], decision.values = F, probability = T)
rf.roc<-roc(raw.test$cc, attr(y_pred, "probabilities")[,2])
rf.fit <- randomForest(cc ~ ., data = raw.training, importance = T, type = "classification")
y_pred = predict(rf.fit, newdata = raw.test[,-1], decision.values = F, probability = T)
rf.roc<-roc(raw.test$cc, y_pred)
y_pred = predict(rf.fit, newdata = raw.test[,-1], decision.values = F, probability = T)
rf.roc<-roc(raw.test$cc, y_pred())
y_pred = predict(rf.fit, newdata = raw.test[,-1], decision.values = F, probability = T)
rf.roc<-roc(raw.test$cc, y_pred)
y_pred = predict(rf.fit, newdata = raw.test[,-1], decision.values = F, probability = T)
rf.roc<-roc(raw.test$cc, y_pred[,2])
y_pred = predict(rf.fit, newdata = raw.test[,-1])
rf.roc<-roc(raw.test$cc, y_pred[,2])
y_pred = predict(rf.fit, newdata = raw.test[,-1])
rf.roc<-roc(raw.test$cc, y_pred[,1])
y_pred = predict(rf.fit, newdata = raw.test[,-1])
rf.roc<-roc(raw.test$cc, y_pred[,0])
y_pred = predict(rf.fit, newdata = raw.test[,-1])
rf.roc<-roc(raw.test$cc, attr(rb.fit, "probabilities")[,2])
plot(rf.roc)
rf.roc
y_pred = predict(rf.fit, newdata = raw.test[,-1])
rf.roc<-roc(raw.test$cc, attr(y_pred, "probabilities")[,2])
y_pred = predict(rf.fit, newdata = raw.test[,-1])
rf.roc<-roc(raw.test$cc, y_pred$cc[,2])
y_pred = predict(rf.fit, newdata = raw.test[,-1])
rf.roc<-roc(raw.test$cc, getElement(y_pred,V1))
y_pred = predict(rf.fit, newdata = raw.test[,-1])
rf.roc<-roc(raw.test$cc, getElement(y_pred,"V1"))
y_pred = predict(rf.fit, newdata = raw.test[,-1])
rf.roc<-roc(raw.test$cc, y_pred["V1"])
y_pred = predict(rf.fit, newdata = raw.test[,-1])
rf.roc<-roc(raw.test$cc, y_pred["V1"])
y_pred = predict(rf.fit, newdata = raw.test[,-1])
rf.roc<-roc(raw.test$cc, y_pred["V1"])
y_pred = predict(rf.fit, newdata = raw.test[,-1])
summary(y_pred)
rf.roc<-roc(raw.test$cc, y_pred["V1"])
y_pred = predict(rf.fit, newdata = raw.test[,-1])
summary(y_pred)
y_pred = predict(rf.fit, newdata = raw.test[,-1])
summary(y_pred)
rf.roc<-roc(raw.test$cc, as.numeric(y_pred))
plot(rf.roc)
rf.roc
y_pred = predict(rf.fit, newdata = raw.test[,-1])
summary(y_pred)
rf.roc<-auc(raw.test$cc, as.numeric(y_pred))
plot(rf.roc)
rf.roc
y_pred = predict(rf.fit, newdata = raw.test[,-1])
summary(y_pred)
rf.roc<-roc(raw.test$cc, as.numeric(y_pred))
plot(rf.roc)
rf.roc
y_pred = predict(rf.fit, newdata = raw.test[,-1])
summary(y_pred)
rf.roc<-roc(raw.test$cc, as.numeric(y_pred))
plot(rf.roc)
rf.roc
y_pred = predict(rf.fit, newdata = raw.test[,-1])
summary(y_pred)
rf.roc<-auc(raw.test$cc, as.numeric(y_pred))
plot(rf.roc)
rf.roc
y_pred = predict(rf.fit, newdata = raw.test[,-1])
summary(y_pred)
rf.roc<-roc(raw.test$cc, as.numeric(y_pred))
plot(rf.roc)
rf.roc
rf.fit <- randomForest(cc ~ ., data = raw.training, importance = T, type = "classification")
y_pred = predict(rf.fit, newdata = raw.test[,-1])
summary(y_pred)
rf.roc<-roc(raw.test$cc, as.numeric(y_pred))
plot(rf.roc)
rf.roc
rf.fit500 <- randomForest(cc ~ ., data = raw.training, importance = T, type = "classification", ntrees = 500)
rf.pred500 <- predict(rf.fit500, raw.test)
auc(raw.test$cc, as.numeric(rf.pred500))
rf.fit1000 <- randomForest(cc ~ ., data = raw.training, importance = T, type = "classification", ntrees = 1000)
rf.pred1000 <- predict(rf.fit1000, raw.test)
auc(raw.test$cc, as.numeric(rf.pred1000))
rf.fit2500 <- randomForest(cc ~ ., data = raw.training, importance = T, type = "classification", ntrees = 2500)
rf.pred2500 <- predict(rf.fit2500, raw.test)
auc(raw.test$cc, as.numeric(rf.pred25000))
rf.fit500 <- randomForest(cc ~ ., data = raw.training, importance = T, type = "classification", ntrees = 500)
rf.pred500 <- predict(rf.fit500, raw.test)
auc(raw.test$cc, as.numeric(rf.pred500))
rf.fit1000 <- randomForest(cc ~ ., data = raw.training, importance = T, type = "classification", ntrees = 1000)
rf.pred1000 <- predict(rf.fit1000, raw.test)
auc(raw.test$cc, as.numeric(rf.pred1000))
rf.fit2500 <- randomForest(cc ~ ., data = raw.training, importance = T, type = "classification", ntrees = 2500)
rf.pred2500 <- predict(rf.fit2500, raw.test)
auc(raw.test$cc, as.numeric(rf.pred2500))
